input {
    file {
        type => "apt-history"
        path => "/var/log/apt/history.log"
        start_position => "beginning"
        sincedb_path   => "/dev/null"
    }
}

filter {
  multiline {
    type    => "apt-history"
    pattern => "^\n"
    negate  => true
    what    => "previous"
  }
  grok {
    type      => "apt-history"
    singles   => true
    pattern   => "^\n\nStart-Date: %{DATE_EU:s_date}  %{TIME:s_time}"
    add_field => [ "startdate", "%{s_date} %{s_time}" ]}
  grok {
    type    => "apt-history"
    singles => true
    pattern => "\n\nCommandline: %{DATA:commandline}\n\n"
  }
  grok {
    type    => "apt-history"
    singles => true
    pattern => "\n\nInstall: %{DATA:packages}\n\n"
    add_tag => [ "install" ]
    tag_on_failure => false
  }
  grok {
    type    => "apt-history"
    singles => true
    pattern => "\n\nUpgrade: %{DATA:packages}\n\n"
    add_tag => [ "upgrade" ]
    tag_on_failure => false
  }
  grok {
    type    => "apt-history"
    singles => true
    pattern => "\n\nError: %{DATA:error}\n\n"
    add_tag => [ "error" ]
    tag_on_failure => false
  }
  mutate {
    type  => "apt-history"
    gsub  => [ "packages", "\),", ") ###" ]
    split => [ "packages", " ### "]
  }
  grok {
    type      => "apt-history"
    singles   => true
    pattern   => "\n\nEnd-Date: %{DATE_EU:e_date}  %{TIME:e_time}"
    add_field => [ "enddate", "%{e_date} %{e_time}" ]
  }
  mutate {
    type   => "apt-history"
    remove => [ "s_time", "s_date", "e_time", "e_date" ]
  }
  date {
    type  => "apt-history"
    match => [ "startdate", "YYYY-MM-dd HH:mm:ss" ]
  }
}

output
{
    elasticsearch
    {
        hosts => ["https://backend-elastic:9200"]
        ssl_verification_mode => none
        user     => "elastic"
        password => "acrespy"
        index => "backend-logstash_apt-history"
    }

    stdout
    {
        codec => rubydebug
    }
}
