import { getCookie } from '../utils.js';

export function chatView(container) {
    container.innerHTML = '';

    // Création du conteneur principal (container-fluid)
    const containerFluid = document.createElement('div');
    containerFluid.className = 'container-fluid';

    // Création de la première rangée (row)
    const row = document.createElement('div');
    row.className = 'row';

    // Création de la première colonne (col-md-4)
    const col1 = document.createElement('div');
    col1.className = 'col-md-4';

    // Titre "Joueurs connectés"
    const h5 = document.createElement('h5');
    h5.textContent = 'Joueurs connectés';

    // Liste des joueurs connectés (ul)
    const userList = document.createElement('ul');
    userList.className = 'list-group';
    userList.id = 'user-list';

    // Ajout du titre et de la liste dans la première colonne
    col1.appendChild(h5);
    col1.appendChild(userList);

    // Création de la deuxième colonne (col-md-8)
    const col2 = document.createElement('div');
    col2.className = 'col-md-8';

    // Création de la carte (card)
    const card = document.createElement('div');
    card.className = 'card';

    // Création de l'en-tête de la carte (card-header)
    const cardHeader = document.createElement('div');
    cardHeader.className = 'card-header';
    cardHeader.id = 'chat-header';
    cardHeader.textContent = 'Sélectionnez un joueur pour discuter';

    // Création du corps de la carte (card-body)
    const cardBody = document.createElement('div');
    cardBody.className = 'card-body';
    cardBody.id = 'chat-body';
    cardBody.style.height = '400px';
    cardBody.style.overflowY = 'scroll';

    // Création du pied de carte (card-footer)
    const cardFooter = document.createElement('div');
    cardFooter.className = 'card-footer';

    // Création de l'input group pour le message
    const inputGroup = document.createElement('div');
    inputGroup.className = 'input-group';

    // Champ de texte pour écrire un message
    const chatInput = document.createElement('input');
    chatInput.type = 'text';
    chatInput.id = 'chat-input';
    chatInput.className = 'form-control';
    chatInput.placeholder = 'Écrire un message...';

    // Bouton d'envoi
    const sendButton = document.createElement('button');
    sendButton.className = 'btn btn-primary';
    sendButton.id = 'send-message';
    sendButton.textContent = 'Envoyer';

    // Ajout du champ texte et du bouton dans l'input group
    inputGroup.appendChild(chatInput);
    inputGroup.appendChild(sendButton);

    // Ajout de l'input group dans le pied de carte
    cardFooter.appendChild(inputGroup);

    // Ajout de l'en-tête, du corps et du pied dans la carte
    card.appendChild(cardHeader);
    card.appendChild(cardBody);
    card.appendChild(cardFooter);

    // Ajout de la carte dans la deuxième colonne
    col2.appendChild(card);

    // Ajout des deux colonnes dans la rangée
    row.appendChild(col1);
    row.appendChild(col2);

    // Ajout de la rangée dans le conteneur principal
    containerFluid.appendChild(row);

    // Enfin, ajout de tout le conteneur fluid dans l'élément container
    container.appendChild(containerFluid);


//


    // Fonction pour charger les utilisateurs connectés
    function loadConnectedUsers() {
        fetch('/api_chat/connected_users/')
            .then(response => response.json())
            .then(users => {
                const userList = document.getElementById('user-list');
                userList.innerHTML = '';
                users.forEach(user => {
                    const listItem = document.createElement('li');
                    listItem.classList.add('list-group-item');
                    listItem.textContent = user.username;
                    listItem.addEventListener('click', () => {
                        openChat(user.id, user.username);
                    });
                    userList.appendChild(listItem);
                });
            })
            .catch(error => console.error('Erreur lors du chargement des utilisateurs :', error));
    }

    let currentConversationId = null;
    let messageRefreshInterval = null;

    // Fonction pour ouvrir une conversation avec un utilisateur
    function openChat(userId, username) {
        document.getElementById('chat-header').textContent = `Discussion avec ${username}`;
        document.getElementById('chat-body').innerHTML = '';
        currentConversationId = null;

        let currentUserId = '';
        let currentUsername = '';

        fetch('/api_chat/current_user/', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': getCookie('csrftoken')
            }
        })
        .then(response => response.json())
        .then(data => {
            currentUserId = data.id;
            currentUsername = data.username;
            // console.log('Receiver ID:', userId, 'Username:', username);
            // console.log('Sender ID:', currentUserId, 'Username:', currentUsername);
        })
        .catch(error => {
            console.error('Erreur lors de la récupération de l\'utilisateur connecté :', error);
        });
                
        // Créer une nouvelle conversation ou récupérer l'existante
        fetch(`/api_chat/start_conversation/${userId}/`)
            .then(response => response.json())
            .then(data => {
                currentConversationId = data.conversation_id;
                // console.log('Conversation Id:', currentConversationId);
                loadMessages(currentConversationId);

                // Mettre à jour les messages toutes les 5 secondes
                messageRefreshInterval = setInterval(() => {loadMessages(currentConversationId);}, 5000); // Intervalle de 5 secondes
            })
            .catch(error => console.error('Erreur lors de l\'ouverture de la conversation :', error));
    }

    // Fonction pour charger les messages d'une conversation
    function loadMessages(conversationId) {
        if (!conversationId) {
            console.error('Conversation ID non défini');
            return;
        }
        fetch(`/api_chat/messages/${conversationId}/`)
            .then(response => response.json())
            .then(messages => {
                const chatBody = document.getElementById('chat-body');
                chatBody.innerHTML = '';
                messages.forEach(msg => {
                    const msgElement = document.createElement('div');
                    msgElement.classList.add('mb-2');
                    msgElement.innerHTML = `<small>${msg.date} :</small>
                                            <strong>${msg.sender}</strong> :
                                            ${msg.content}`;
                    chatBody.appendChild(msgElement);
                });
            })
            .catch(error => console.error('Erreur lors du chargement des messages :', error));
    }

    // Fonction pour envoyer un message
    document.getElementById('send-message').addEventListener('click', () => {
        const input = document.getElementById('chat-input');
        const message = input.value.trim();
        if (message && currentConversationId) {
            const formData = new FormData();
            formData.append('conversation_id', currentConversationId);
            formData.append('content', message);

            fetch(`/api_chat/send_message/${currentConversationId}/`, {
                method: 'POST',
                body: formData,
                headers: {
                    'X-CSRFToken': getCookie('csrftoken')
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.status === 'Message envoyé') {
                        const msgElement = document.createElement('div');
                        msgElement.classList.add('mb-2');
                        msgElement.innerHTML = `<small>${data.date} :</small>
                                                <strong>${data.sender}</strong> :
                                                ${message}`;
                        document.getElementById('chat-body').appendChild(msgElement);
                        input.value = '';
                    }
                })
                .catch(error => console.error('Erreur lors de l\'envoi du message :', error));
        }
    });

    // Charger les utilisateurs connectés au chargement de la page
    loadConnectedUsers();

    // Refresh the list of online users every 30 seconds
    setInterval(loadConnectedUsers, 30000);
}
    