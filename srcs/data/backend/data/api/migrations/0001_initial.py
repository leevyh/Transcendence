# Generated by Django 5.0.6 on 2024-11-05 14:58

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User_site',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(max_length=10, unique=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', models.CharField(choices=[('online', 'Online'), ('offline', 'Offline'), ('ingame', 'Ingame'), ('intournament', 'Intournament')], default='offline', max_length=255)),
                ('avatar', models.ImageField(default='media/default.jpg', upload_to='avatar/')),
                ('user_school', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='MatchHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=255)),
                ('status', models.CharField(choices=[('unread', 'unread'), ('read', 'read')], default='unread', max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
            ],
        ),
        migrations.CreateModel(
            name='Accessibility',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('language', models.CharField(choices=[('fr', 'French'), ('en', 'English'), ('sp', 'Spanish')], default='en', max_length=255)),
                ('font_size', models.IntegerField(choices=[(1, 'Small'), (2, 'Medium'), (3, 'Large')], default=2)),
                ('dark_mode', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Game_Settings',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('background_game', models.CharField(choices=[('black', 'Black'), ('white', 'White'), ('purple', 'Purple'), ('pink', 'Pink'), ('yellow', 'Yellow'), ('green', 'Green'), ('gray', 'Gray'), ('blue', 'Blue'), ('lila', 'Lila'), ('red', 'Red'), ('brown', 'Brown'), ('green_light', 'Green Light'), ('blue_light', 'Blue Light')], default='black')),
                ('pads_color', models.CharField(choices=[('black', 'Black'), ('white', 'White'), ('purple', 'Purple'), ('pink', 'Pink'), ('yellow', 'Yellow'), ('green', 'Green'), ('gray', 'Gray'), ('blue', 'Blue'), ('lila', 'Lila'), ('red', 'Red'), ('brown', 'Brown'), ('green_light', 'Green Light'), ('blue_light', 'Blue Light')], default='white')),
                ('ball_color', models.CharField(choices=[('black', 'Black'), ('white', 'White'), ('purple', 'Purple'), ('pink', 'Pink'), ('yellow', 'Yellow'), ('green', 'Green'), ('gray', 'Gray'), ('blue', 'Blue'), ('lila', 'Lila'), ('red', 'Red'), ('brown', 'Brown'), ('green_light', 'Green Light'), ('blue_light', 'Blue Light')], default='white')),
            ],
        ),
        migrations.CreateModel(
            name='Stats_user',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('nb_games', models.IntegerField(default=0)),
                ('nb_wins', models.IntegerField(default=0)),
                ('nb_losses', models.IntegerField(default=0)),
                ('nb_point_taken', models.IntegerField(default=0)),
                ('nb_point_given', models.IntegerField(default=0)),
                ('win_rate', models.FloatField(default=0.0)),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'pending'), ('accepted', 'accepted'), ('refused', 'refused')], default='pending', max_length=255)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friend', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('user1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_initiated', to=settings.AUTH_USER_MODEL)),
                ('user2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships_received', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
